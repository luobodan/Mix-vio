%YAML:1.0

#common parameters
#support: 1 imu 1 cam; 1 imu 2 cam: 2 cam; 
imu: 1         
num_of_cam: 2  

imu_topic: "/imu0"
image0_topic: "/cam2/image_raw"
image1_topic: "/cam3/image_raw"
output_path: "/home/lbd/slam/vins_fusion_ceres_2_1/src/VINS-Fusion-master/config/uma/uma/stereo_30lk_50_1024SP_30"

cam0_calib: "cam0_pinhole.yaml"
cam1_calib: "cam1_pinhole.yaml"
image_width: 752
image_height: 480
   
USE_SP : 3 # 0 1 3
LG_TH : 0.7
NUM_SP : 1024
SP_radius : 30
KEY_TRACK : 0


# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.

# Inverse of Kalibr result, (transpose for rotation matrix, T'=-R'T)
body_T_cam0: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [ -0.999689,  0.0243728,  0.0052601,   0.114706,
           -0.0243212,  -0.999658, 0.00965731,   -0.01013,
           0.00549368, 0.00952638,    0.99994,  0.0310924,
           0, 0, 0, 1]

body_T_cam1: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [-0.999282,  -0.0359727,   0.0118824 ,  -0.139747,
        0.0359257,   -0.999346, -0.00414647 , -0.0116126,
        0.0120238, -0.00371661,    0.999921 ,   0.033224,
          0, 0, 0, 1]
# no inverse
# body_T_cam0: !!opencv-matrix
#    rows: 4
#    cols: 4
#    dt: d
#    data: [-0.9996891001069981, -0.024321238097913023, 0.005493678607751144, 0.11425322792996404,
#         0.024372821606514775, -0.9996575482196979, 0.009526376767667806, -0.013218431734117795,
#         0.005260104010154635, 0.009657311466820284, 0.9999395319923278, -0.03159608818108305,
#         0.0, 0.0, 0.0, 1.0]

# body_T_cam1: !!opencv-matrix
#    rows: 4
#    cols: 4
#    dt: d
#    data: [0.0125552670891, -0.999755099723, 0.0182237714554, -0.0198435579556,
#            0.999598781151, 0.0130119051815, 0.0251588363115, 0.0453689425024,
#           -0.0253898008918, 0.0179005838253, 0.999517347078, 0.00786212447038,
#           0, 0, 0, 1]

#Multiple thread support
multiple_thread: 1

#feature traker paprameters
max_cnt: 30            # max feature number in feature tracking
min_dist: 50            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
flow_back: 1            # perform forward and backward optical flow to improve feature tracking accuracy

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.1          # accelerometer measurement noise standard deviation. 
gyr_n: 0.01         # gyroscope measurement noise standard deviation.     
acc_w: 0.001        # accelerometer bias random work noise standard deviation.  
gyr_w: 0.0001       # gyroscope bias random work noise standard deviation.     
g_norm: 9.81007     # gravity magnitude

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
td: 0.00534915928352496                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#loop closure parameters
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "~/output/pose_graph/" # save and load path
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
